#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define NUM_FRAMES 3
#define NUM_PAGES 10

int main() {
    int referenceString[NUM_PAGES] = {0, 1, 2, 3, 2, 4, 5, 3, 4, 1};
    int frames[NUM_FRAMES];
    int pageFaults = 0;
    int nextFrameIndex = 0;
    int pageFound;
    int futureIndex[NUM_PAGES];

    // Assume we know the future page references (in this case, after each reference)
    for (int i = 0; i < NUM_PAGES; i++) {
        futureIndex[i] = INT_MAX; // Initialize future index to maximum to indicate page not referenced again
        for (int j = i + 1; j < NUM_PAGES; j++) {
            if (referenceString[i] == referenceString[j]) {
                futureIndex[i] = j; // Store the next index where the page is referenced
                break;
            }
        }
    }

    for (int i = 0; i < NUM_FRAMES; i++) {
        frames[i] = -1; // Initialize frames to -1 to indicate they are empty
    }

    printf("Reference String: ");
    for (int i = 0; i < NUM_PAGES; i++) {
        printf("%d ", referenceString[i]);
    }
    printf("\n");

    for (int i = 0; i < NUM_PAGES; i++) {
        pageFound = 0;
        // Check if page already in frames
        for (int j = 0; j < NUM_FRAMES; j++) {
            if (frames[j] == referenceString[i]) {
                pageFound = 1;
                break;
            }
        }
        // If page not found, perform page replacement
        if (!pageFound) {
            int farthestIndex = -1;
            int replaceIndex = -1;
            for (int j = 0; j < NUM_FRAMES; j++) {
                int k;
                for (k = i + 1; k < NUM_PAGES; k++) {
                    if (frames[j] == referenceString[k]) {
                        if (k > farthestIndex) {
                            farthestIndex = k;
                            replaceIndex = j;
                        }
                        break;
                    }
                }
                if (k == NUM_PAGES) { // If page not referenced again, replace it
                    replaceIndex = j;
                    break;
                }
            }
            frames[replaceIndex] = referenceString[i];
            pageFaults++;
        }

        printf("Page %d -> ", referenceString[i]);
        for (int j = 0; j < NUM_FRAMES; j++) {
            if (frames[j] == -1) {
                printf(" - ");
            } else {
                printf("%d ", frames[j]);
            }
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);

    return 0;
}
