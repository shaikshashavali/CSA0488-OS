#include <stdio.h>
#include <stdlib.h>

// Structure to represent a process
struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
    int priority;
    int remainingBurstTime;
    int startTime;
    int completionTime;
};

// Function to find the process with the highest priority
int findHighestPriority(struct Process processes[], int n, int currentTime) {
    int highestPriorityIndex = -1;
    int highestPriority = -1;

    for (int i = 0; i < n; i++) {
        if (processes[i].arrivalTime <= currentTime && processes[i].remainingBurstTime > 0) {
            if (highestPriorityIndex == -1 || processes[i].priority < highestPriority) {
                highestPriorityIndex = i;
                highestPriority = processes[i].priority;
            }
        }
    }

    return highestPriorityIndex;
}

// Function to perform Preemptive Priority Scheduling
void prioritySchedule(struct Process processes[], int n) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < n) {
        int highestPriorityIndex = findHighestPriority(processes, n, currentTime);

        if (highestPriorityIndex != -1) {
            struct Process *currentProcess = &processes[highestPriorityIndex];

            if (currentProcess->startTime == -1) {
                currentProcess->startTime = currentTime;
            }

            currentProcess->remainingBurstTime--;
            currentTime++;

            if (currentProcess->remainingBurstTime == 0) {
                currentProcess->completionTime = currentTime;
                completedProcesses++;
            }
        } else {
            currentTime++;
        }
    }
}

// Function to display the schedule and average turnaround time
void displaySchedule(struct Process processes[], int n) {
    float totalTurnaroundTime = 0.0;

    printf("\nProcess\t Arrival Time\t Burst Time\t Priority\t Start Time\t Completion Time\t Turnaround Time\n");

    for (int i = 0; i < n; i++) {
        int turnaroundTime = processes[i].completionTime - processes[i].arrivalTime;
        totalTurnaroundTime += turnaroundTime;

        printf("%d\t %d\t\t %d\t\t %d\t\t %d\t\t %d\t\t\t %d\n", processes[i].processID, processes[i].arrivalTime,
               processes[i].burstTime, processes[i].priority, processes[i].startTime, processes[i].completionTime, turnaroundTime);
    }

    float averageTurnaroundTime = totalTurnaroundTime / n;
    printf("\nAverage Turnaround Time: %.2f\n", averageTurnaroundTime);
}

int main() {
    int n;

    // Input number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Array to store information about each process
    struct Process processes[n];

    // Input details for each process
    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        printf("Enter Arrival Time for Process %d: ", processes[i].processID);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter Burst Time for Process %d: ", processes[i].processID);
        scanf("%d", &processes[i].burstTime);
        printf("Enter Priority for Process %d: ", processes[i].processID);
        scanf("%d", &processes[i].priority);
        processes[i].remainingBurstTime = processes[i].burstTime;
        processes[i].startTime = -1;
        processes[i].completionTime = -1;
    }

    // Perform Preemptive Priority Scheduling
    prioritySchedule(processes, n);

    // Display the schedule and average turnaround time
    displaySchedule(processes, n);

    return 0;
}
