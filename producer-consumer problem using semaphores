#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
#define PRODUCER_THREADS 2
#define CONSUMER_THREADS 3
#define MAX_ITEMS 20

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t mutex, empty, full;

void *producer(void *arg) {
    int item;
    for (int i = 0; i < MAX_ITEMS; i++) {
        item = rand() % 100; // Generate a random item
        sem_wait(&empty);
        sem_wait(&mutex);
        
        buffer[in] = item;
        printf("Producer produced item: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;
        
        sem_post(&mutex);
        sem_post(&full);
        
        usleep(rand() % 1000000); // Sleep for random time
    }
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int item;
    for (int i = 0; i < MAX_ITEMS; i++) {
        sem_wait(&full);
        sem_wait(&mutex);
        
        item = buffer[out];
        printf("Consumer consumed item: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;
        
        sem_post(&mutex);
        sem_post(&empty);
        
        usleep(rand() % 1000000); // Sleep for random time
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t producerThreads[PRODUCER_THREADS], consumerThreads[CONSUMER_THREADS];
    
    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    
    // Create producer threads
    for (int i = 0; i < PRODUCER_THREADS; i++) {
        pthread_create(&producerThreads[i], NULL, producer, NULL);
    }
    
    // Create consumer threads
    for (int i = 0; i < CONSUMER_THREADS; i++) {
        pthread_create(&consumerThreads[i], NULL, consumer, NULL);
    }
    
    // Join producer threads
    for (int i = 0; i < PRODUCER_THREADS; i++) {
        pthread_join(producerThreads[i], NULL);
    }
    
    // Join consumer threads
    for (int i = 0; i < CONSUMER_THREADS; i++) {
        pthread_join(consumerThreads[i], NULL);
    }
    
    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);
    
    return 0;
}
