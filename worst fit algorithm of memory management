#include <stdio.h>
#include <stdlib.h>

#define MAX_MEMORY_SIZE 100

// Structure to represent a memory block
struct MemoryBlock {
    int size;
    int allocated;
};

// Function prototypes
void initializeMemory(struct MemoryBlock memory[], int size);
void displayMemory(struct MemoryBlock memory[], int size);
void worstFit(struct MemoryBlock memory[], int size, int processSize);

int main() {
    struct MemoryBlock memory[MAX_MEMORY_SIZE];
    int totalMemory, processSize;

    // Input total memory size
    printf("Enter total memory size: ");
    scanf("%d", &totalMemory);

    // Initialize memory blocks
    initializeMemory(memory, totalMemory);

    // Display initial memory status
    printf("\nInitial memory status:\n");
    displayMemory(memory, totalMemory);

    // Input process size
    printf("\nEnter process size: ");
    scanf("%d", &processSize);

    // Allocate memory using worst fit algorithm
    worstFit(memory, totalMemory, processSize);

    // Display final memory status
    printf("\nFinal memory status:\n");
    displayMemory(memory, totalMemory);

    return 0;
}

// Initialize memory blocks
void initializeMemory(struct MemoryBlock memory[], int size) {
    for (int i = 0; i < size; i++) {
        memory[i].size = rand() % 100 + 1; // Random size for each memory block
        memory[i].allocated = 0;
    }
}

// Display memory status
void displayMemory(struct MemoryBlock memory[], int size) {
    printf("Memory Block\tSize\tAllocated\n");
    for (int i = 0; i < size; i++) {
        printf("%d\t\t%d\t%s\n", i + 1, memory[i].size, memory[i].allocated ? "Yes" : "No");
    }
}

// Allocate memory using worst fit algorithm
void worstFit(struct MemoryBlock memory[], int size, int processSize) {
    int largestBlockSize = -1;
    int largestBlockIndex = -1;

    // Find the largest available block in memory
    for (int i = 0; i < size; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            if (memory[i].size > largestBlockSize) {
                largestBlockSize = memory[i].size;
                largestBlockIndex = i;
            }
        }
    }

    // Allocate memory if a suitable block is found
    if (largestBlockIndex != -1) {
        memory[largestBlockIndex].allocated = 1;
        printf("Memory allocated successfully using worst fit.\n");
    } else {
        printf("Memory allocation failed. No suitable block found.\n");
    }
}
